import { connect } from 'react-redux'
import { PropTypes } from 'prop-types'
import { assertPropTypes } from 'plottr_check-prop-types'
import { bindActionCreators } from 'redux'
import * as pltr from 'pltr/v2'
import {
  Navbar,
  Grid,
  NavItem,
  Nav,
  Col,
  Row,
  Button,
  DeleteConfirmModal,
  ErrorModal,
  MessageModal,
  ColorPickerColor,
  ItemsManagerModal as UnconnectedItemsManagerModal,
  ListItem,
  PlottrModal as UnconnectedPlottrModal,
  ModalBody,
  ModalHeader,
  ModalTitle,
  ModalFooter,
  Form,
  EditAttribute as UnconnectedEditAttribute,
  FilterList as UnconnectedFilterList,
  RichText as UnconnectedRichText,
  editorRegistry,
  normalize,
  Image as UnconnectedImage,
  ImagePicker as UnconnectedImagePicker,
  MiniColorPicker,
  Spinner,
  FunSpinner,
  FullPageSpinner,
  InputModal,
  ColorPicker as UnconnectedColorPicker,
  Switch,
  CardTemplateDetails,
  PlotlineTemplateDetails as UnconnectedPlotlineTemplateDetails,
  TemplateCreate as UnconnectedTemplateCreate,
  TemplateEdit,
  TemplatePicker as UnconnectedTemplatePicker,
  Beamer as UnconnectedBeamer,
  LanguagePicker as UnconnectedLanguagePicker,
  CategoryPicker as UnconnectedCategoryPicker,
  CharacterCategoriesModal as UnconnectedCharacterCategoriesModal,
  CharacterDetails as UnconnectedCharacterDetails,
  CharacterEditDetails as UnconnectedCharacterEditDetails,
  CharacterItem as UnconnectedCharacterItem,
  CharacterListView as UnconnectedCharacterListView,
  CustomAttrFilterList as UnconnectedCustomAttrFilterList,
  BookFilterList as UnconnectedBookFilterList,
  CharacterCategoryFilterList as UnconnectedCharacterCategoryFilterList,
  CharactersFilterList as UnconnectedCharactersFilterList,
  PlacesFilterList as UnconnectedPlacesFilterList,
  TagFilterList as UnconnectedTagFilterList,
  GenericFilterList,
  CardColorFilterList,
  SortList as UnconnectedSortList,
  CharacterView as UnconnectedCharacterView,
  BookSelectList as UnconnectedBookSelectList,
  BookList as UnconnectedBookList,
  EditSeries as UnconnectedEditSeries,
  FileLocation as UnconnectedFileLocation,
  BookChooser as UnconnectedBookChooser,
  TagView as UnconnectedTagView,
  TagListView as UnconnectedTagListView,
  ExportDialog as UnconnectedExportDialog,
  ExportNavItem as UnconnectedExportNavItem,
  NoteListView as UnconnectedNoteListView,
  OutlineView as UnconnectedOutlineView,
  PlaceListView as UnconnectedPlaceListView,
  TimelineWrapper as UnconnectedTimelineWrapper,
  ActsConfigModal as UnconnectedActsConfigModal,
  AskToSaveModal,
  ErrorBoundary as UnconnectedErrorBoundary,
  DashboardErrorBoundary as UnconnectedDashboardErrorBoundary,
  SelectList as UnconnectedSelectList,
  TagLabel,
  CustomAttributeModal as UnconnectedCustomAttributeModal,
  SubNav as UnconnectedSubNav,
  ProjectTemplateDetails,
  CharacterTemplateDetails,
  DashboardBody as UnconnectedDashboardBody,
  DashboardNav,
  ActsHelpModal as UnconnectedActsHelpModal,
  FirebaseLogin as UnconnectedFirebaseLogin,
  ChoiceView as UnconnectedChoiceView,
  ExpiredView as UnconnectedExpiredView,
  ProOnboarding as UnconnectedProOnboarding,
  UpdateNotifier as UnconnectedUpdateNotifier,
  NewProjectInputModal as UnconnectedNewProjectInputModal,
} from '../components'

const connector = {
  redux: {
    connect,
    bindActionCreators,
  },
  pltr,
}

// Platform is an object which provides features which are specific to
// a given platform.  For example, opening a file or a URL.
//
// See `pltrTypeSpecs` for a specification of what it should provide.
//
// You can check the platform supplied to this function using the
// function: `checkPltrConnector`
//
// The platform can also contain side effects that write data to
// external systems -- such as telling an API to update the value of a
// template.
//
// IMPORTANT: The platform shouldn't be a source of data!  If you find
// yourself putting data into platform, then ask yourself why you
// aren't putting it into Redux instead.  Redux is a much better way
// of modelling data and maintaing consistency across the application.
const pltrTypeSpecs = {
  undo: PropTypes.func.isRequired,
  redo: PropTypes.func.isRequired,
  electron: PropTypes.object,
  appVersion: PropTypes.func.isRequired,
  defaultBackupLocation: PropTypes.func.isRequired,
  setDarkMode: PropTypes.func.isRequired,
  file: PropTypes.shape({
    createNew: PropTypes.func.isRequired,
    openExistingFile: PropTypes.func.isRequired,
    doesFileExist: PropTypes.func.isRequired,
    pathSep: PropTypes.func.isRequired,
    basename: PropTypes.func.isRequired,
    openKnownFile: PropTypes.func.isRequired,
    deleteKnownFile: PropTypes.func.isRequired,
    editKnownFilePath: PropTypes.func.isRequired,
    renameFile: PropTypes.func.isRequired,
    removeFromKnownFiles: PropTypes.func.isRequired,
    saveFile: PropTypes.func.isRequired,
    readFile: PropTypes.func.isRequired,
    rmRF: PropTypes.func.isRequired,
    createFromSnowflake: PropTypes.func.isRequired,
    createFromScrivener: PropTypes.func.isRequired,
    joinPath: PropTypes.func.isRequired,
    listOfflineFiles: PropTypes.func.isRequired,
  }),
  update: PropTypes.shape({
    quitToInstall: PropTypes.func.isRequired,
    downloadUpdate: PropTypes.func.isRequired,
    checkForUpdates: PropTypes.func.isRequired,
    onUpdateError: PropTypes.func.isRequired,
    onUpdaterUpdateAvailable: PropTypes.func.isRequired,
    onUpdaterUpdateNotAvailable: PropTypes.func.isRequired,
    onUpdaterDownloadProgress: PropTypes.func.isRequired,
    onUpdatorUpdateDownloaded: PropTypes.func.isRequired,
    deregisterUpdateListeners: PropTypes.func.isRequired,
  }),
  updateLanguage: PropTypes.func.isRequired,
  updateBeatHierarchyFlag: PropTypes.func.isRequired,
  license: PropTypes.shape({
    checkForActiveLicense: PropTypes.func.isRequired,
    verifyLicense: PropTypes.func.isRequired,
    trial90days: PropTypes.array.isRequired,
    checkForPro: PropTypes.func.isRequired,
    startTrial: PropTypes.func.isRequired,
    deleteLicense: PropTypes.func.isRequired,
    saveLicenseInfo: PropTypes.func.isRequired,
  }),
  reloadMenu: PropTypes.func.isRequired,
  template: PropTypes.shape({
    deleteTemplate: PropTypes.func.isRequired,
    editTemplateDetails: PropTypes.func.isRequired,
    startSaveAsTemplate: PropTypes.func.isRequired,
    saveTemplate: PropTypes.func.isRequired,
  }),
  settings: PropTypes.shape({
    saveAppSetting: PropTypes.func.isRequired,
  }),
  os: PropTypes.func.isRequired,
  isDevelopment: PropTypes.bool.isRequired,
  isWindows: PropTypes.func.isRequired,
  isMacOS: PropTypes.func.isRequired,
  openExternal: PropTypes.func.isRequired,
  createErrorReport: PropTypes.func.isRequired,
  createFullErrorReport: PropTypes.func.isRequired,
  handleCustomerServiceCode: PropTypes.func.isRequired,
  log: PropTypes.shape({
    info: PropTypes.func.isRequired,
    warn: PropTypes.func.isRequired,
    error: PropTypes.func.isRequired,
  }),
  showErrorBox: PropTypes.func.isRequired,
  showOpenDialog: PropTypes.func.isRequired,
  node: PropTypes.shape({
    env: PropTypes.string.isRequired,
  }),
  rollbar: PropTypes.shape({
    rollbarAccessToken: PropTypes.string.isRequired,
    platform: PropTypes.func.isRequired,
  }),
  export: PropTypes.shape({
    askToExport: PropTypes.func.isRequired,
    export_config: PropTypes.object.isRequired,
    saveExportConfigSettings: PropTypes.func.isRequired,
    notifyUser: PropTypes.func.isRequired,
    exportSaveDialog: PropTypes.func.isRequired,
  }),
  moveFromTemp: PropTypes.func.isRequired,
  duplicateFile: PropTypes.func.isRequired,
  showItemInFolder: PropTypes.func.isRequired,
  mpq: PropTypes.object.isRequired,
  rootElementSelectors: PropTypes.array.isRequired,
  templatesDisabled: PropTypes.bool.isRequired,
  exportDisabled: PropTypes.bool.isRequired,
  listenForRCELock: PropTypes.func.isRequired,
  lockRCE: PropTypes.func.isRequired,
  machineId: PropTypes.func.isRequired,
  extractImages: PropTypes.func.isRequired,
  firebase: PropTypes.shape({
    onSessionChange: PropTypes.func.isRequired,
    currentUser: PropTypes.func.isRequired,
    fetchFiles: PropTypes.func.isRequired,
    logOut: PropTypes.func.isRequired,
    saveCustomTemplate: PropTypes.func.isRequired,
    uploadExisting: PropTypes.func.isRequired,
  }),
  login: PropTypes.shape({
    launchLoginPopup: PropTypes.func.isRequired,
  }),
  storage: PropTypes.shape({
    isStorageURL: PropTypes.func.isRequired,
    resolveToPublicUrl: PropTypes.func.isRequired,
    saveImageToStorageBlob: PropTypes.func.isRequired,
    saveImageToStorageFromURL: PropTypes.func.isRequired,
    downloadStorageImage: PropTypes.func.isRequired,
  }),
}

export const checkPltrConnector = (platform) => {
  assertPropTypes(pltrTypeSpecs, platform, 'pltr-connector', 'platform', () => {
    const error = new Error()
    return error.stack
  })
}

export default (platform) => {
  checkPltrConnector(platform)
  var connectorObject = { ...connector, platform }
  return {
    Navbar,
    Grid,
    NavItem,
    Nav,
    Col,
    Row,
    Button,
    DeleteConfirmModal,
    ErrorModal,
    MessageModal,
    ColorPickerColor,
    ItemsManagerModal: UnconnectedItemsManagerModal(connectorObject),
    ListItem,
    PlottrModal: UnconnectedPlottrModal(connectorObject),
    ModalBody,
    ModalHeader,
    ModalTitle,
    ModalFooter,
    Form,
    EditAttribute: UnconnectedEditAttribute(connectorObject),
    FilterList: UnconnectedFilterList(connectorObject),
    RichText: UnconnectedRichText(connectorObject),
    editorRegistry,
    normalize,
    Image: UnconnectedImage(connectorObject),
    ImagePicker: UnconnectedImagePicker(connectorObject),
    MiniColorPicker,
    Spinner,
    FunSpinner,
    FullPageSpinner,
    InputModal,
    ColorPicker: UnconnectedColorPicker(connectorObject),
    Switch,
    CardTemplateDetails,
    PlotlineTemplateDetails: UnconnectedPlotlineTemplateDetails(connectorObject),
    TemplateCreate: UnconnectedTemplateCreate(connectorObject),
    TemplateEdit,
    TemplatePicker: UnconnectedTemplatePicker(connectorObject),
    Beamer: UnconnectedBeamer(connectorObject),
    LanguagePicker: UnconnectedLanguagePicker(connectorObject),
    CategoryPicker: UnconnectedCategoryPicker(connectorObject),
    CharacterCategoriesModal: UnconnectedCharacterCategoriesModal(connectorObject),
    CharacterDetails: UnconnectedCharacterDetails(connectorObject),
    CharacterEditDetails: UnconnectedCharacterEditDetails(connectorObject),
    CharacterItem: UnconnectedCharacterItem(connectorObject),
    CharacterListView: UnconnectedCharacterListView(connectorObject),
    CustomAttrFilterList: UnconnectedCustomAttrFilterList(connectorObject),
    BookFilterList: UnconnectedBookFilterList(connectorObject),
    CharacterCategoryFilterList: UnconnectedCharacterCategoryFilterList(connectorObject),
    CharactersFilterList: UnconnectedCharactersFilterList(connectorObject),
    PlacesFilterList: UnconnectedPlacesFilterList(connectorObject),
    TagFilterList: UnconnectedTagFilterList(connectorObject),
    GenericFilterList,
    CardColorFilterList,
    SortList: UnconnectedSortList(connectorObject),
    CharacterView: UnconnectedCharacterView(connectorObject),
    BookSelectList: UnconnectedBookSelectList(connectorObject),
    BookList: UnconnectedBookList(connectorObject),
    EditSeries: UnconnectedEditSeries(connectorObject),
    FileLocation: UnconnectedFileLocation(connectorObject),
    BookChooser: UnconnectedBookChooser(connectorObject),
    TagView: UnconnectedTagView(connectorObject),
    TagListView: UnconnectedTagListView(connectorObject),
    ExportDialog: UnconnectedExportDialog(connectorObject),
    ExportNavItem: UnconnectedExportNavItem(connectorObject),
    NoteListView: UnconnectedNoteListView(connectorObject),
    OutlineView: UnconnectedOutlineView(connectorObject),
    PlaceListView: UnconnectedPlaceListView(connectorObject),
    TimelineWrapper: UnconnectedTimelineWrapper(connectorObject),
    ActsConfigModal: UnconnectedActsConfigModal(connectorObject),
    AskToSaveModal,
    ErrorBoundary: UnconnectedErrorBoundary(connectorObject),
    DashboardErrorBoundary: UnconnectedDashboardErrorBoundary(connectorObject),
    SelectList: UnconnectedSelectList(connectorObject),
    TagLabel,
    CustomAttributeModal: UnconnectedCustomAttributeModal(connectorObject),
    SubNav: UnconnectedSubNav(connectorObject),
    ProjectTemplateDetails,
    CharacterTemplateDetails,
    DashboardBody: UnconnectedDashboardBody(connectorObject),
    DashboardNav,
    ActsHelpModal: UnconnectedActsHelpModal(connectorObject),
    FirebaseLogin: UnconnectedFirebaseLogin(connectorObject),
    ChoiceView: UnconnectedChoiceView(connectorObject),
    ExpiredView: UnconnectedExpiredView(connectorObject),
    ProOnboarding: UnconnectedProOnboarding(connectorObject),
    UpdateNotifier: UnconnectedUpdateNotifier(connectorObject),
    NewProjectInputModal: UnconnectedNewProjectInputModal(connectorObject),
  }
}
